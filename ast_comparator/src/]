#include "comparator.h"

// Open dot file 
// generate tree file

int main(int argc, char**argv)
{
	size_t filesize;
	char *line;
	int temp;

	open_file(argv);

	filesize = get_filesize(fp);

	pool = calloc(filesize/50, sizeof(tree_node*));

	for(temp=0; temp<5; temp++)
	{
		read_line(fp);
		// ignore header
	}

	while((line = read_line(fp))!=NULL)
	{
		// 1 for decl_node; 0 for link node
		if(check_type(line)==1)	// declare node | link node
			decl_n(line);
		else
			link_n(line);
	}

	dump_tree(root);


	free(pool);
   return 0;
}

void dump_tree(tree_node *root)
{

}

static tree_node *search_pool(int id)
{
	int temp;

	for(temp = n_inpool-1; temp>=0; temp++)
	{
		tree_node *cur_node;
		cur_node = *(pool+temp);

		if(id == cur_node->_id)
			return cur_node;	
	}
}

void decl_n(char *line)
{
	// ADD to Pool
	tree_node *node = calloc(1, sizeof(tree_node));
//	DEBUF("%s", line);

	node->nodeN = calloc(16, sizeof(char));
	sscanf(line, "%s", node->nodeN);

	sscanf(node->nodeN+4, "%d", &node->_id);
//	DEBUF("id: %d", node->_id);

	node->n_child = 0;

	*(pool+n_inpool) = node;
	n_inpool++;

	free(line);
}

void link_n(char *line)
{
	// parent & child must both exist
	DEBUF("%s", line);
	
	// Search pool for parent
	// Resize child nodes
	// Search pool for child
	// add child to parent

}

int check_type(char *line)
{
	int type;
	if(*(line+8) == '[')
		type = 1;
	else type = 0;

	return type;
}

char *read_line(FILE *fileptr)
{
	char *line = calloc(128, sizeof(char));
	if(fgets(line, 128, fileptr)==NULL)
		return NULL;
	if(*line == '}')
	{
		free(line);
		return NULL;
	}
	return line;
}

void
open_file(char**argv)
{
        if((fp =fopen(argv[1], "r")) == NULL)
        {
                fprintf(stderr, "filedir: %s\n", argv[1]);
                fprintf(stderr, "Usage: ./comparator <file dir> <scope>\n");
                fflush(stderr);
                exit(0);
        }
}

size_t
get_filesize(FILE *fileptr)
{
        // only call this function before you move the ptr to file position
	assert(NULL != fileptr);
        fseek(fileptr, 0L, SEEK_END);

        size_t size =(size_t)ftell(fileptr);
        rewind(fileptr);
        return size;
}

static char
peek(FILE *fileptr)
{
        // peek next
        // eat \n
        int next = fgetc(fileptr);
        ungetc(next, fileptr);

        return (char)next;
}

